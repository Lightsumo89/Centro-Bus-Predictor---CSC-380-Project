name: Deploy to Remote Server Automatically

on:
  push:
    branches: [ Production ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Create project directory if it doesn't exist
          mkdir -p ~/bus-tracking-app
          
          # Clone or pull the repository
          if [ -d ~/bus-tracking-app/.git ]; then
            cd ~/bus-tracking-app
            git fetch origin
            git checkout Production
            git pull origin Production
          else
            git clone -b Production https://github.com/Lightsumo89/Centro-Bus-Predictor---CSC-380-Project.git ~/bus-tracking-app
          fi
          
          # Find available Python 3 executable
          if command -v python3 &>/dev/null; then
            PYTHON_CMD="python3"
          elif command -v python &>/dev/null && python --version 2>&1 | grep -q "Python 3"; then
            PYTHON_CMD="python"
          else
            echo "Error: Python 3 not found. Please ensure Python 3 is installed."
            exit 1
          fi
          
          echo "Using Python: $($PYTHON_CMD --version)"
          
          # Go to the project directory
          cd ~/bus-tracking-app
          
          # Create directories for Python user packages if they don't exist
          mkdir -p ~/.local/bin
          mkdir -p ~/.local/lib/python3.10/site-packages
          
          # Add user bin directory to PATH (for this session)
          export PATH=$HOME/.local/bin:$PATH
          
          # Skip virtual environment - install directly to user space
          echo "Installing dependencies directly to user space..."
          $PYTHON_CMD -m pip install --user --upgrade pip
          $PYTHON_CMD -m pip install --user -r requirements.txt
          
          # Create a bin directory for any scripts
          mkdir -p ~/bin
          
          # Create a run script with better error handling
          cat > ~/bus-tracking-app/run.sh << 'EOL'
          #!/bin/bash
          cd ~/bus-tracking-app
          
          # Find the Python 3 executable
          if command -v python3 &>/dev/null; then
            PYTHON_BIN="python3"
          elif command -v python &>/dev/null && python --version 2>&1 | grep -q "Python 3"; then
            PYTHON_BIN="python"
          else
            echo "Error: Python 3 not found"
            exit 1
          fi
          
          # Kill any existing instances
          pkill -f "python.*bus-api.py" || true
          sleep 2
          
          # Set environment variables
          export PORT=10589
          export FLASK_ENV=production
          export PYTHONPATH=$PYTHONPATH:~/bus-tracking-app
          
          # Start the application with logging
          echo "Starting application at $(date)" >> deploy.log
          nohup $PYTHON_BIN Controller/bus-api.py >> app.log 2>&1 &
          APP_PID=$!
          
          # Wait a bit and check if app is running
          sleep 5
          if ps -p $APP_PID > /dev/null; then
            echo "Application started successfully with PID $APP_PID" >> deploy.log
            echo "Application started on port $PORT"
          else
            echo "Application failed to start" >> deploy.log
            echo "Last 20 lines of app.log:" >> deploy.log
            tail -20 app.log >> deploy.log
            exit 1
          fi
          EOL
          
          chmod +x ~/bus-tracking-app/run.sh
          
          # Stop any running instances and start the application
          echo "Stopping existing instances..."
          pkill -f "python.*bus-api.py" || true
          sleep 2
          
          echo "Starting application..."
          cd ~/bus-tracking-app
          ./run.sh
          
          # Verify deployment
          sleep 5
          if curl -s -o /dev/null -w "%{http_code}" http://localhost:10589/ | grep -q "200\|302"; then
            echo "Deployment successful - application is responding"
          else
            echo "Warning: Application might not be responding correctly"
            echo "Checking process..."
            ps aux | grep bus-api
            echo "Last 20 lines of app.log:"
            tail -20 app.log
          fi
